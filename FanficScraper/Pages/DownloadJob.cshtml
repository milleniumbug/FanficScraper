@page "{id}"
@using FanficScraper.Data
@model DownloadJobModel
@{
    @switch (Model.Job?.Status)
    {
        case DownloadJobStatus.NotYetStarted:
            ViewData["Title"] = "Downloading";
            break;
        case DownloadJobStatus.Failed:
            ViewData["Title"] = "Fail";
            break;
        case DownloadJobStatus.Succeeded:
            ViewData["Title"] = "Success";
            break;
        case DownloadJobStatus.Started:
            ViewData["Title"] = "Downloading";
            break;
        case null:
            ViewData["Title"] = "Not found";
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
}

@if (Model.Job != null)
{
    <div>
        @switch (Model.Job.Status)
        {
            case DownloadJobStatus.NotYetStarted:
                <h1>Downloading</h1>
                break;
            case DownloadJobStatus.Failed:
                <h1>Failed</h1>
                break;
            case DownloadJobStatus.Succeeded:
                <h1>SUCCESS!</h1>
                break;
            case DownloadJobStatus.Started:
                <h1>Downloading</h1>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        <a href="@Model.Job.Url">Requested story</a>
        
        @if (Model.Job.StoryId != null)
        {
            <br/><br/>
            <b><a href="/StoryDetails/@Model.Job.StoryId">Done! Go here</a></b>
        }
        else
        {
            <script>
                setInterval(async () => {
                    const response = await fetch("/Api/StoryAsync/@Model.JobId");
                    const result = await response.json();
                    if (result.status === 1 || result.status === 2) {
                        window.location.reload();
                    }
                }, 5000);
            </script>
        }
    </div>
}
else
{
    <div>
        <h1>Not Found</h1>
    </div>
}