@page "{id}"
@using System.Text.Json
@using System.Web
@using FanficScraper.Data
@model DownloadJobModel
@{
    @switch (Model.AggregateStatus)
    {
        case AggregateDownloadJobStatus.NotYetStarted:
            ViewData["Title"] = "Queued";
            break;
        case AggregateDownloadJobStatus.FinishedWithErrors:
        case AggregateDownloadJobStatus.FinishedSuccessfully:
            ViewData["Title"] = "Finished";
            break;
        case AggregateDownloadJobStatus.Failed:
            ViewData["Title"] = "Failed";
            break;
        case AggregateDownloadJobStatus.InProgressWithErrors:
        case AggregateDownloadJobStatus.InProgress:
            ViewData["Title"] = "Downloading";
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
}

<div>
    @switch (Model.AggregateStatus)
    {
        case AggregateDownloadJobStatus.NotYetStarted:
            <h1>Queued</h1>
            break;
        case AggregateDownloadJobStatus.Failed:
            <h1>Failed</h1>
            break;
        case AggregateDownloadJobStatus.FinishedSuccessfully:
            <h1>SUCCESS!</h1>
            break;
        case AggregateDownloadJobStatus.FinishedWithErrors:
            <h1>Finished, some downloads failed</h1>
            break;
        case AggregateDownloadJobStatus.InProgress:
            <h1>Downloading</h1>
            break;
        case AggregateDownloadJobStatus.InProgressWithErrors:
            <h1>Downloading, some errors occured</h1>
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
    
    @foreach (var (job, number) in Model.Jobs.Select((details, index) => (details, index+1)))
    {
        var statusText = job.Status switch
        {
            DownloadJobStatus.NotYetStarted => "Queued",
            DownloadJobStatus.Started => "In progress",
            DownloadJobStatus.Succeeded => "SUCCESS!",
            DownloadJobStatus.Failed => "Failed. Try again later.",
            _ => throw new ArgumentOutOfRangeException()
        };
        <p>
            <a href="@job.Url">Requested Story #@(number)</a><br/>Status:
            @if (job.Status == DownloadJobStatus.Succeeded)
            {
                <a href="/StoryDetails/@job.StoryId">@statusText</a>
            }
            else
            {
                @statusText
            }
        </p>
    }

    @if (Model.AggregateStatus is AggregateDownloadJobStatus.FinishedSuccessfully or AggregateDownloadJobStatus.FinishedWithErrors)
    {
        // do nothing
    }
    else
    {
        var unfinishedJobs = Model.Jobs
            .Where(job => job.Status is DownloadJobStatus.Started or DownloadJobStatus.NotYetStarted)
            .ToList();
        <script>
            const rawJson =
                @Html.Raw(
                    HttpUtility.JavaScriptStringEncode(
                        JsonSerializer.Serialize(
                            new
                            {
                                AggregateStatus = Model.AggregateStatus,
                                Jobs = unfinishedJobs.Select(job =>
                                    new
                                    {
                                        job.JobId,
                                        job.Status,
                                        NeedsRefresh = job.Status is DownloadJobStatus.NotYetStarted or DownloadJobStatus.Started,
                                    }),
                                NeedsRefresh = unfinishedJobs.Count > 0,
                            },
                            new JsonSerializerOptions()
                            {
                                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                            }),
                        addDoubleQuotes: true))
                ;
                
            const json = JSON.parse(rawJson);
            if (json.needsRefresh) {
                setInterval(async () => {
                    for (const job of json.jobs) {
                        if (job.needsRefresh) {
                            const response = await fetch(`/Api/StoryAsync/${job.jobId}`);
                            const result = await response.json();
                            if (result.status !== job.status) {
                                window.location.reload();
                            }
                        }
                    }
                }, 5000);
            }
        </script>
    }
</div>